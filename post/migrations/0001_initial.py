# Generated by Django 3.1.3 on 2020-11-28 10:49

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posting_photo', models.ImageField(upload_to='images')),
                ('posting_content', models.TextField()),
                ('posting_date', models.DateTimeField(default=datetime.datetime.now)),
                ('my_like', models.PositiveIntegerField(default=0)),
                ('like_user', models.ManyToManyField(related_name='like_user', to=settings.AUTH_USER_MODEL)),
                ('posting_writer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_content', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply_writer', models.CharField(max_length=30)),
                ('reply_content', models.TextField()),
                ('reply_like', models.IntegerField(default=0)),
                ('reply_date', models.DateTimeField(default=datetime.datetime.now)),
                ('posting_id', models.ForeignKey(db_column='posting_id', on_delete=django.db.models.deletion.CASCADE, to='post.post')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='tagging',
            field=models.ManyToManyField(blank=True, related_name='tagged', to='post.Tag'),
        ),
    ]
